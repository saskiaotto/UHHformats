---
title: "Document title"
subtitle: "Subtitle"
description: |
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut elit odio. Donec fermentum tellus neque, vitae fringilla orci pretium vitae. Fusce maximus finibus facilisis. Donec ut ullamcorper turpis.
date: "01/04/2022"
author:
  - name: Author name 
    url: https://www.biologie.uni-hamburg.de/en.html
    affiliation: Universität Hamburg
    affiliation-url: https://www.uni-hamburg.de/en.html
citation:
  url: https://example.com/summarizing-output
license: "CC BY-SA" 
### Uncomment the following line if the document language is German
# language: custom_lang.yml
### Comment or remove the following two lines if NO references are used
bibliography: [bib/references.bib, bib/packages.bib] # Path to bibliography files 
csl: bib/sage-harvard.csl                            # Path to reference style file
### Settings for rendering the document:
format: 
  html:
    theme:  default 
    include-after-body: styles/js_logo.html # adds a logo to navbar
    css: styles/styles.css                  # modifies layout style
    self-contained: true
    toc: true
    toc-depth: 3
    toc-location: left
    toc-title: Contents   # remove line or adjust if language is German
    number-sections: true
    number-depth: 3
    anchor-sections: true
    smooth-scroll: true
    citations-hover: true
    footnotes-hover: true
    crossref: 
      chapters: false     # set to 'true' if figure numbering should follow subsections
      fig-prefix: Fig.    # (default is 'Figure'; adjust if language is German)
    # Code options:
    highlight-style: arrow # default
    code-block-bg: true
    code-block-border-left: "#31BAE9"
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-link: true
    code-tools:
      source: false
      toggle: true
      caption: "CODE"
execute:
  echo: true
  warning: false
  message: false
---

```{r}
#| label: load-packages
#| include: false
# Load all your packages that you need later
library(knitr)
```

```{r}
#| label: generate-package-refs
#| include: false
# Automatically create a bib database for R packages used above
knitr::write_bib(
  x = c(.packages(), 'rmarkdown', 'UHHformats',
    # Add here now all packages that are loaded above:
    'knitr'), 
  file = 'bib/packages.bib')
```


# Introduction

## YAML header

In this template many of the Quarto options for HTML output are listed in the YAML header. If you want to know more about these settings I recommend the [HTML format reference](https://quarto.org/docs/reference/formats/html.html) for a complete list of available options.

Quarto offers also extensive YAML intelligence (completion and diagnostics) in the RStudio IDE and in VS Code for project files, YAML front matter, and executable cell options. Just start with some letters and press the tab key on the keyboard. You will see a small dialog box with a list of available options.


## Code blocks

Code blocks in Quarto documents are treated in similar way as in Markdown documents. One important difference is that code chunk options (in Quarto also called 'cell level options') are typically included in special comments using `#|` at the top of code chunks rather than within the line that begins the chunk:

```{r}
#| eval: false
summary(cars)
```

Please note that individual words are separated with a hyphen, not a dot, followed by a colon, not an equal sign as in R Markdown documents. Quarto uses this approach to both better accommodate longer options like `fig-cap`, `fig-subcap`, and `fig-alt` as well as to make it straightforward to edit chunk options within more structured editors that don’t have an easy way to edit chunk metadata (e.g. most traditional notebook UIs).

However, if you prefer it is still possible to include chunk options on the first line (e.g. ```{r, echo = FALSE}) as in R Markdown documents. 


## Callout blocks

Quarto provides five different types of callouts that are an excellent way to draw extra attention to certain concepts. 

::: callout-note
The color and icon will be different depending upon the type that you select. You can choose between: `note`, `warning`, `important`, `tip`, and `caution`.
:::

::: callout-tip
## Tip With Caption

This is an example of a callout with a caption.
:::

::: {.callout-caution collapse="true"}
## Expand To Learn About Collapse

This is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse="true"` to collapse it by default or `collapse="false"` to make a collapsible callout that is expanded by default.
:::


# Methods

## Cross-referencing

External images and R figures can be referenced with `@fig-label`, where 'label' is the name of the code chunk. These label names should not contain underscores to separate words, use hyphens here instead. Note that figures need to have a caption to be numbered and for cross-referencing, The caption is also set in the chunk option with `#| fig-cap: "Your caption"`.

Tables require similarly a label and table caption for cross-referencing. But here, the cross-reference contains the prefix 'tbl': `@tbl-label`. 

Cross-references to individual sections can simply be made with the prefix 'sec' and by adding a '{#sec-identifier}' to any heading.

This is for example a cross-reference to @tbl-irismeans in @sec-tables and a cross-reference to @fig-boxplottab in @sec-figures.

To create a reference-able code block, add a #lst-identifier along with a lst-cap attribute inside the curly braces (see code chunk example @lst-codeblock). Note that the indication of the programming language requires for this static code block a dot set before the 'r'.

``` {.r #lst-codeblock lst-cap="Example for a referenceable code block"}
4+4
```


## Mathjax

A little math formula :

$$x = \sum_{i=1}^{n} \sqrt{\frac{y}{i}} $$

Here is a more complex example where the equation is embedded in a LaTeX equation environment including numbering and crossreferencing:

If the random variable $Y$ follows a standard normal distribution, i.e. $Y \sim N(0,1)$, it's density function can be described with

$$
f_{Y}(y)=\varphi(y) \stackrel{\mathrm{def}}{=} \frac{1}{\sqrt{2 \pi}} \exp \left\{ -\frac{y^2}{2} \right\}, \quad y \in \mathbb{R}.
$$ {#eq-density-norm}

$\pi$ represents the circle number or Ludolph's number. The function

$$
  F_{Y}(y)=\Phi(y) \stackrel{\mathrm{def}}{=} \int_{-\infty}^y \varphi(x) \,\mathrm{d}x, \quad y \in \mathbb{R}
$$ {#eq-dist-func}

represents then the distribution function of @eq-density-norm.


## Images

Quarto includes several features aimed at making it easier to work with figures and subfigures, as well as for laying out panels that contain multiple figures, tables, or other content.

[![Single image of Iris setosa with URL link but no cross-reference.](images/wikipedia_iris_setosa.jpg)](https://en.wikipedia.org/wiki/Iris_setosa){fig-align="left" fig-alt="Wikipedia image of Iris setosa."}

For instance, if you have several figures that appear as a group, you can create a figure div to enclose them (see @fig-versicolor and @fig-virginica).

::: {layout-ncol=2 layout-valign="bottom"}

![Iris versicolor](images/wikipedia_iris_versicolor.jpg){#fig-versicolor}

![Iris virginica](images/wikipedia_iris_virginica.jpg){#fig-virginica}

:::

The layout attribute enables the creation of much more complex layouts. @fig-custom-layout provides an example with a common figure caption and one identifier for all three.

::: {#fig-custom-layout layout="[20,-2,46,-2,30]" layout-valign="bottom"}

![Iris setosa](images/wikipedia_iris_setosa.jpg)

![Iris versicolor](images/wikipedia_iris_versicolor.jpg)

![Iris virginica](images/wikipedia_iris_virginica.jpg)

Custom layout of images
:::



# Analysis

## R output

R output is typically shown in the monospace font (here an example with the `mtcars` dataset in the subfolder `data/`): 
```{r}
# Import dataset from the data/ folder
mtcars <- read.csv("data/mtcars.csv")
summary(mtcars[,1:4])
```


## Tables {#sec-tables}

Here is a simple table based on Markdown Syntax (@tbl-markdown).

| A            | New              | Table          |
|:-------------|:----------------:|---------------:|
|left-aligned  |center-aligned    |right-aligned   |
|$123          |$456              |$789            |
|*italics*     |~~strikethrough~~ |**boldface**    |

: My Caption {#tbl-markdown}


Here is a sample table output using the `knitr::kable()` function.

```{r}
#| label: tbl-irismeans
#| tbl-cap: "Species-specific mean lengths and widths."
tab <- aggregate(. ~ Species, data = iris, mean)
kable(tab)
```


## Figures {#sec-figures}

A base graphics histogram (@fig-basehist).

```{r basehist}
#| fig-cap: "A Histogram made with the basic graphics package"
#| label: fig-basehist
hist(rnorm(100))
```

Here for comparison a boxplot with a different image height (@fig-boxplot).

```{r}
#| label: fig-boxplot
#| fig-cap: "Fuel differences between transmission types (0 = automatic, 1 = manual)."
#| fig-height: 3
#| fig-width: 3
boxplot(mpg ~ am, mtcars)
```


## Tabbed sections

You can create a tabset via a markdown div with the class name *panel-tabset*. Each top-level heading within the div creates a new tab as shown below:

::: {.panel-tabset}

#### First tab

```{r}
#| fig-cap: "Boxplot made with the basic graphics package"
#| label: fig-boxplottab
boxplot(rnorm(100), rnorm(100))
```

#### Second tab

Cum eaque dicta architecto culpa eius. Dignissimos officiis error exercitationem. Adipisci odit ad ea iusto fugiat laborum maiores. Dolore sunt et veritatis alias nesciunt maxime cumque. Culpa aut non ea. Culpa ex quia debitis sint eveniet cum.

:::  
<!-- End tabset -->

## Interactive figures with plotly

If the package 'plotly' is installed, the following code block will be executed:

```{r}
#| eval: !expr ifelse(nzchar(system.file(package = "plotly")), "true", "false")
#| fig-cap: "This is the interactive htmlwidget 'plotly'"
#| fig-width: 8
#| label: fig-plotly
p <- plotly::plot_ly(data = mtcars, x = ~mpg, y = ~wt, color = ~cyl)
plotly::add_markers(p)
```


## Diagrams

Quarto has native support for embedding *Mermaid* and *Graphviz* diagrams. This enables you to create flowcharts, sequence diagrams, state diagrams, gnatt charts, and more using a plain text syntax inspired by markdown.

### Mermaid

Mermaid is a Javascript based diagramming and charting tool that uses Markdown-inspired text definitions and a renderer to create and modify complex diagrams (see @fig-mermaid-diagram).

```{mermaid}
%%| label: fig-mermaid-diagram
%%| fig-cap: Simple flowchart based on the JS-tool Mermaid.
%%| fig-width: 6
flowchart LR
  A[Hard edge] --> B(Round edge)
  B --> C{Decision}
  C --> D[Result one]
  C --> E[Result two]
  style C fill:#f9f,stroke:#333,stroke-width:4px
  style E fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5
```

::: callout-note
Cell level options are here indicated with `%%|` instead of `#|`!
:::

```{mermaid}
%%| label: fig-mermaid-diagram
%%| fig-cap: A sequence diagram based on Mermaid.
%%| fig-width: 6

sequenceDiagram
  participant Alice
  participant Bob
  Alice->>John: Hello John, how are you?
  loop Healthcheck
    John->>John: Fight against hypochondria
  end
  Note right of John: Rational thoughts <br/>prevail!
  John-->>Alice: Great!
  John->>Bob: How about you?
  Bob-->>John: Jolly good!
```

Useful links:

- [https://mermaid-js.github.io/mermaid/#/](https://mermaid-js.github.io/mermaid/#/)
- [https://mermaid.live](https://mermaid.live)


### Graphviz

The [Graphviz](https://graphviz.org/) layout programs take descriptions of graphs in a simple text language and make diagrams in useful formats. Graphviz has many useful features for concrete diagrams, such as options for colors, fonts, tabular node layouts, line styles, hyperlinks, and custom shapes (see @fig-dot-diagram).

```{dot}
//| label: fig-dot-diagram
//| fig-cap: "An example for a diagram made with Graphviz."

graph G {
  layout=neato
  run -- intr;
  intr -- runbl;
  runbl -- run;
  run -- kernel;
  kernel -- zombie;
  kernel -- sleep;
  kernel -- runmem;
  sleep -- swap;
  swap -- runswap;
  runswap -- new;
  runswap -- runmem;
  new -- runmem;
  sleep -- runmem;
}
```

::: callout-note
Cell level options are here indicated with `//|`!
:::


# Footnotes

Here is a footnote reference[^1], and another[^2].

<!-- The following text will be displayed at the very end of the page. -->

[^1]: Here is the footnote.

[^2]: Here's one with multiple blocks.

    Subsequent paragraphs are indented to show that they belong to the previous footnote.

        { some.code }

    The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items.
    

# Adding citations and bibliography

Link a `.bib` document via the YAML header, and the bibliography will be printed at the end. The default bibliography style is provided in the `sage-harvard.csl` file (do not delete), which adopts the [SAGE Harvard](https://uk.sagepub.com/sites/default/files/sage_harvard_reference_style_0.pdf) reference style.

References can be cited directly within the document using the Quarto equivalent of the \LaTeX citation system `[@key]`, where key is the citation key in the first line of the entry in the .csl file. Example: [@Taylor1937]. To cite multiple entries, separate the keys by semicolons (e.g., [@Knupp1999; @Kamm2000]. You can also write in-text citations, as follows: @Taylor1937 say this and that.

There is also the package [citr](https://github.com/crsh/citr) which I highly recommend: *citr* provides functions and an RStudio add-in to search a BibTeX-file to create and insert formatted Markdown citations into the current document. If you are using the reference manager [Zotero](https://www.zotero.org/) the add-in can access your reference database directly.

## Software

If you want to include a paragraph on the software used, here is some example text/code to get the current R and package versions. The code to generate a bibliography file including all package references has been already added at the beginning of this script (code chunk 'generate-package-refs').

All analyses were performed using the statistical software R (version `r paste(R.Version()$major, R.Version()$minor, sep = ".")`) [@R-base]. This report, including tables and figures, was generated using the R packages 'rmarkdown' (version `r packageVersion("rmarkdown")`) [@R-rmarkdown], 'UHHformats' (version `r packageVersion("UHHformats")`) [@R-UHHformats], and 'knitr' (version `r packageVersion("knitr")`) [@R-knitr].


<!-- Pandoc will automatically generate a list of works cited and place it in the document if the style calls for it. It will be placed in a div with the id refs if one exists: -->

# References

::: {#refs}
:::


# Acknowledgments {.appendix .unnumbered .unlisted}

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut elit odio. Donec fermentum tellus neque, vitae fringilla orci pretium vitae. Fusce maximus finibus facilisis. Donec ut ullamcorper turpis.


